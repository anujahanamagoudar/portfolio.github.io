#include <iostream>
#include <vector>
#include <queue>
#include <climits>

using namespace std;

struct Edge {
    int destination;
    int weight;
};

class Graph {
public:
    int V;
    vector<vector<Edge>> adjList;

    Graph(int V) : V(V) {
        adjList.resize(V);
    }

    void addEdge(int u, int v, int weight) {
        adjList[u].push_back({v, weight});
    }

    void dijkstra(int source) {
        vector<int> dist(V, INT_MAX);
        dist[source] = 0;

        priority_queue<pair<int, int>, vector<pair<int, int>>, greater<pair<int, int>>> pq;
        pq.push({0, source});

        while (!pq.empty()) {
            int u = pq.top().second;
            pq.pop();

            for (const auto& edge : adjList[u]) {
                int v = edge.destination;
                int weight = edge.weight;

                if (dist[u] + weight < dist[v]) {
                    dist[v] = dist[u] + weight;
                    pq.push({dist[v], v});
                }
            }
        }

        cout << "Shortest path distances from node " << source << ":\n";
        for (int i = 0; i < V; i++) {
            cout << "To node " << i << ": " << (dist[i] == INT_MAX ? "Not reachable" : to_string(dist[i])) << endl;
        }
    }
};

int main() {
    int numStudents, numInstitutions, numPreferences;

    cout << "Enter number of students: ";
    cin >> numStudents;
    cout << "Enter number of institutions: ";
    cin >> numInstitutions;

    Graph graph(numStudents + numInstitutions);

    cout << "Enter number of preferences (edges): ";
    cin >> numPreferences;

    for (int i = 0; i < numPreferences; i++) {
        int student, institution, score;
        cout << "Enter student index, institution index and preference score (higher means more preferred): ";
        cin >> student >> institution >> score;

        graph.addEdge(student, numStudents + institution, score);
    }

    for (int i = 0; i < numStudents; i++) {
        cout << "\nFor Student " << i << ":\n";
        graph.dijkstra(i);
    }

    return 0;
}
